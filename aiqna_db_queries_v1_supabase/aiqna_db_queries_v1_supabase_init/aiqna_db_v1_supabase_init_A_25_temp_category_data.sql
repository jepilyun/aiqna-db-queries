/*
 * aiqna db for web service (Temp Categories Table)
 * Database Name 'aiqna'
 *
 * Created 2024-10-12
 * Updated 2025-10-12
 */

--------------------------------------------------------------------------------
-- TABLE: temp_category_data
--  - AI로 추출된 카테고리 임시 저장 (category_code 매핑 전)
--------------------------------------------------------------------------------
CREATE TABLE public.temp_category_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- 숫자 PK

  -- 추출된 카테고리 정보
  category_name VARCHAR(255) NOT NULL,
  
  -- 소스 정보
  source_type VARCHAR(50) NOT NULL,
  source_id   VARCHAR(1023) NOT NULL,

  -- 매핑 정보
  category_code VARCHAR(96) NULL,
  
  -- 관리 정보
  admin_message VARCHAR(1023) NULL,
  is_processed  BOOLEAN NOT NULL DEFAULT FALSE,
  processed_at  TIMESTAMPTZ NULL,
  
  -- 시스템 정보
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ          DEFAULT CURRENT_TIMESTAMP,

  -- 외래키
  CONSTRAINT temp_category_data_category_code_fkey
    FOREIGN KEY (category_code)
    REFERENCES public.categories (category_code)
    ON UPDATE CASCADE ON DELETE SET NULL,

  -- 제약조건
  CONSTRAINT temp_category_data_source_type_check 
    CHECK (source_type IN ('youtube_video', 'instagram_post', 'blog_post', 'text', 'ai_extraction')),
  
  CONSTRAINT temp_category_data_category_name_not_empty_check 
    CHECK (LENGTH(TRIM(category_name)) > 0),
  
  -- 중복 방지: 같은 소스에서 같은 카테고리명은 한 번만
  CONSTRAINT temp_category_data_unique_source_category
    UNIQUE (source_type, source_id, category_name)
);

-- =============================================================================================
-- INDEXES
-- =============================================================================================
CREATE INDEX IF NOT EXISTS temp_category_data_unprocessed_idx
  ON public.temp_category_data (is_processed, created_at)
  WHERE is_processed = FALSE;

CREATE INDEX IF NOT EXISTS temp_category_data_category_name_idx
  ON public.temp_category_data (category_name, created_at DESC);

CREATE INDEX IF NOT EXISTS temp_category_data_category_name_trgm_idx
  ON public.temp_category_data USING gin (category_name gin_trgm_ops);

CREATE INDEX IF NOT EXISTS temp_category_data_source_idx
  ON public.temp_category_data (source_type, source_id, created_at DESC);

CREATE INDEX IF NOT EXISTS temp_category_data_category_code_idx
  ON public.temp_category_data (category_code, created_at DESC)
  WHERE category_code IS NOT NULL;

CREATE INDEX IF NOT EXISTS temp_category_data_processed_idx
  ON public.temp_category_data (is_processed, processed_at DESC)
  WHERE is_processed = TRUE;

CREATE INDEX IF NOT EXISTS temp_category_data_created_at_idx
  ON public.temp_category_data (created_at DESC);

-- =============================================================================================
-- RLS
-- =============================================================================================
ALTER TABLE public.temp_category_data ENABLE ROW LEVEL SECURITY;

CREATE POLICY "temp_category_data are visible to everyone"
  ON public.temp_category_data FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

CREATE POLICY "Service role can manage temp_category_data"
  ON public.temp_category_data FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- =============================================================================================
-- TRIGGERS
-- =============================================================================================
CREATE TRIGGER trigger_update_temp_category_data_updated_at
  BEFORE UPDATE ON public.temp_category_data
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE OR REPLACE FUNCTION auto_mark_processed_on_temp_category_code()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    IF NEW.category_code IS NOT NULL AND OLD.category_code IS NULL THEN
        NEW.is_processed := TRUE;
        NEW.processed_at := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER trigger_auto_mark_processed_temp_category
  BEFORE UPDATE ON public.temp_category_data
  FOR EACH ROW
  WHEN (NEW.category_code IS NOT NULL AND OLD.category_code IS NULL)
  EXECUTE FUNCTION auto_mark_processed_on_temp_category_code();

-- =============================================================================================
-- FUNCTIONS
-- =============================================================================================
CREATE OR REPLACE FUNCTION public.add_temp_category_data(
    p_category_name VARCHAR(255),
    p_source_type   VARCHAR(50),
    p_source_id     VARCHAR(1023)
)
RETURNS BIGINT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
DECLARE
    v_id BIGINT;
BEGIN
    INSERT INTO public.temp_category_data (
        category_name, source_type, source_id
    ) VALUES (
        TRIM(p_category_name), p_source_type, p_source_id
    )
    ON CONFLICT (source_type, source_id, category_name) DO NOTHING
    RETURNING id INTO v_id;
    
    RETURN v_id;
END;
$$;

CREATE OR REPLACE FUNCTION public.map_temp_category_data_to_category_code(
    p_temp_category_data_id BIGINT,
    p_category_code VARCHAR(96),
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
BEGIN
    UPDATE public.temp_category_data
    SET category_code = p_category_code,
        admin_message = p_admin_message,
        is_processed  = TRUE,
        processed_at  = CURRENT_TIMESTAMP,
        updated_at    = CURRENT_TIMESTAMP
    WHERE id = p_temp_category_data_id;
END;
$$;

CREATE OR REPLACE FUNCTION public.get_unprocessed_temp_category_data(
    p_limit INTEGER DEFAULT 100
)
RETURNS TABLE (
    category_name VARCHAR(255),
    source_type   VARCHAR(50),
    source_id     VARCHAR(1023),
    occurrence_count BIGINT,
    first_seen      TIMESTAMPTZ,
    last_seen       TIMESTAMPTZ
)
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
    SELECT 
        category_name,
        source_type,
        source_id,
        COUNT(*)        AS occurrence_count,
        MIN(created_at) AS first_seen,
        MAX(created_at) AS last_seen
    FROM public.temp_category_data
    WHERE is_processed = FALSE
    GROUP BY category_name, source_type, source_id
    ORDER BY occurrence_count DESC, last_seen DESC
    LIMIT p_limit;
$$;

CREATE OR REPLACE FUNCTION public.search_similar_temp_category_names(
    p_category_name VARCHAR(255),
    p_limit INTEGER DEFAULT 10
)
RETURNS TABLE (
    category_name   VARCHAR(255),
    category_code   VARCHAR(96),
    occurrence_count BIGINT,
    is_processed     BOOLEAN,
    similarity_score REAL
)
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
    SELECT 
        mc.category_name,
        mc.category_code,
        COUNT(*) AS occurrence_count,
        mc.is_processed,
        similarity(mc.category_name, p_category_name) AS similarity_score
    FROM public.temp_category_data mc
    WHERE mc.category_name % p_category_name
    GROUP BY mc.category_name, mc.category_code, mc.is_processed
    ORDER BY similarity_score DESC, occurrence_count DESC
    LIMIT p_limit;
$$;

CREATE OR REPLACE FUNCTION public.batch_map_temp_category_name_to_code(
    p_category_name VARCHAR(255),
    p_category_code VARCHAR(96),
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_updated_count INTEGER;
BEGIN
    UPDATE public.temp_category_data
    SET category_code = p_category_code,
        admin_message = p_admin_message,
        is_processed  = TRUE,
        processed_at  = CURRENT_TIMESTAMP,
        updated_at    = CURRENT_TIMESTAMP
    WHERE category_name = p_category_name
      AND is_processed = FALSE;
    
    GET DIAGNOSTICS v_updated_count = ROW_COUNT;
    RETURN v_updated_count;
END;
$$;

CREATE OR REPLACE FUNCTION public.get_temp_category_data_statistics()
RETURNS TABLE (
    total_count BIGINT,
    processed_count BIGINT,
    unprocessed_count BIGINT,
    unique_category_names BIGINT,
    mapped_category_codes BIGINT
)
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
    SELECT 
        COUNT(*) AS total_count,
        COUNT(*) FILTER (WHERE is_processed = TRUE)  AS processed_count,
        COUNT(*) FILTER (WHERE is_processed = FALSE) AS unprocessed_count,
        COUNT(DISTINCT category_name) AS unique_category_names,
        COUNT(DISTINCT category_code) FILTER (WHERE category_code IS NOT NULL) AS mapped_category_codes
    FROM public.temp_category_data;
$$;
