/*
 * aiqna db for web service (Meta Districts Table)
 * Database Name 'aiqna'
 *
 * Created 2024-10-12
 * Updated 2025-10-12
 */

-- 필요 확장 (유사도 검색 사용 시)
-- CREATE EXTENSION IF NOT EXISTS pg_trgm;

--------------------------------------------------------------------------------
-- TABLE: temp_district_data
--  - AI로 추출된 거리명 임시 저장 (district_code 매핑 전)
--------------------------------------------------------------------------------
CREATE TABLE public.temp_district_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- 숫자 PK

  -- 추출된 거리 정보
  district_name VARCHAR(255) NOT NULL,
  
  -- 소스 정보
  source_type VARCHAR(50) NOT NULL,
  source_id   VARCHAR(1023) NOT NULL,

  -- 매핑 정보
  district_code VARCHAR(96) NULL,
  
  -- 관리 정보
  admin_message VARCHAR(1023) NULL,
  is_processed  BOOLEAN NOT NULL DEFAULT FALSE,
  processed_at  TIMESTAMPTZ NULL,
  
  -- 시스템 정보
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ          DEFAULT CURRENT_TIMESTAMP,

  -- 외래키 (실제 districts 테이블의 PK를 참조)
  CONSTRAINT temp_district_data_district_code_fkey
    FOREIGN KEY (district_code)
    REFERENCES public.districts (district_code)
    ON UPDATE CASCADE ON DELETE SET NULL,

  -- 제약조건
  CONSTRAINT temp_district_data_source_type_check 
    CHECK (source_type IN ('youtube_video', 'instagram_post', 'blog_post', 'text')),
  
  CONSTRAINT temp_district_data_district_name_not_empty_check 
    CHECK (LENGTH(TRIM(district_name)) > 0),
  
  -- 중복 방지: 같은 소스에서 같은 거리명은 한 번만
  CONSTRAINT temp_district_data_unique_source_district
    UNIQUE (source_type, source_id, district_name)
) TABLESPACE pg_default;

-- =============================================================================================
-- INDEXES
-- =============================================================================================

-- 미처리 항목 조회 (가장 중요)
CREATE INDEX IF NOT EXISTS temp_district_data_unprocessed_idx
  ON public.temp_district_data (is_processed, created_at)
  WHERE is_processed = FALSE;

-- 거리명 검색
CREATE INDEX IF NOT EXISTS temp_district_data_district_name_idx
  ON public.temp_district_data (district_name, created_at DESC);

-- 거리명 유사/부분 검색용 GIN (pg_trgm 필요)
CREATE INDEX IF NOT EXISTS temp_district_data_district_name_trgm_idx
  ON public.temp_district_data USING gin (district_name gin_trgm_ops);

-- 소스별 조회
CREATE INDEX IF NOT EXISTS temp_district_data_source_idx
  ON public.temp_district_data (source_type, source_id, created_at DESC);

-- district_code 매핑된 항목 조회
CREATE INDEX IF NOT EXISTS temp_district_data_district_code_idx
  ON public.temp_district_data (district_code, created_at DESC)
  WHERE district_code IS NOT NULL;

-- 처리된 항목 조회
CREATE INDEX IF NOT EXISTS temp_district_data_processed_idx
  ON public.temp_district_data (is_processed, processed_at DESC)
  WHERE is_processed = TRUE;

-- 최신 추가순
CREATE INDEX IF NOT EXISTS temp_district_data_created_at_idx
  ON public.temp_district_data (created_at DESC);

-- =============================================================================================
-- RLS
-- =============================================================================================

ALTER TABLE public.temp_district_data ENABLE ROW LEVEL SECURITY;

-- 읽기 전용 (모든 사용자)
CREATE POLICY "temp_district_data are visible to everyone"
  ON public.temp_district_data FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

-- 관리 작업 (service_role만)
CREATE POLICY "Service role can manage temp_district_data"
  ON public.temp_district_data FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- =============================================================================================
-- TRIGGERS
-- =============================================================================================

-- updated_at 자동 업데이트
CREATE TRIGGER trigger_update_temp_district_data_updated_at
  BEFORE UPDATE ON public.temp_district_data
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- district_code가 설정되면 자동으로 is_processed = TRUE로 변경
CREATE OR REPLACE FUNCTION auto_mark_processed_on_temp_district_code()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    IF NEW.district_code IS NOT NULL AND OLD.district_code IS NULL THEN
        NEW.is_processed := TRUE;
        NEW.processed_at := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER trigger_auto_mark_processed_temp_district
  BEFORE UPDATE ON public.temp_district_data
  FOR EACH ROW
  WHEN (NEW.district_code IS NOT NULL AND OLD.district_code IS NULL)
  EXECUTE FUNCTION auto_mark_processed_on_temp_district_code();

-- =============================================================================================
-- FUNCTIONS
-- =============================================================================================

-- 추출된 거리명 저장
CREATE OR REPLACE FUNCTION public.add_temp_district_data(
    p_district_name VARCHAR(255),
    p_source_type   VARCHAR(50),
    p_source_id     VARCHAR(1023)
)
RETURNS BIGINT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
DECLARE
    v_id BIGINT;
BEGIN
    INSERT INTO public.temp_district_data (
        district_name, source_type, source_id
    ) VALUES (
        TRIM(p_district_name), p_source_type, p_source_id
    )
    ON CONFLICT (source_type, source_id, district_name) DO NOTHING
    RETURNING id INTO v_id;

    RETURN v_id;
END;
$$;

-- district_code 매핑 및 자동 처리
CREATE OR REPLACE FUNCTION public.map_temp_district_data_to_district_code(
    p_temp_district_data_id BIGINT,
    p_district_code VARCHAR(96),
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
BEGIN
    UPDATE public.temp_district_data
    SET district_code = p_district_code,
        admin_message = p_admin_message,
        is_processed  = TRUE,
        processed_at  = CURRENT_TIMESTAMP,
        updated_at    = CURRENT_TIMESTAMP
    WHERE id = p_temp_district_data_id;
END;
$$;

-- 미처리 거리명 목록 조회 (관리자용)
CREATE OR REPLACE FUNCTION public.get_unprocessed_temp_district_data(
    p_limit INTEGER DEFAULT 100
)
RETURNS TABLE (
    district_name VARCHAR(255),
    source_type   VARCHAR(50),
    source_id     VARCHAR(1023),
    occurrence_count BIGINT,
    first_seen      TIMESTAMPTZ,
    last_seen       TIMESTAMPTZ
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        district_name,
        source_type,
        source_id,
        COUNT(*)        AS occurrence_count,
        MIN(created_at) AS first_seen,
        MAX(created_at) AS last_seen
    FROM public.temp_district_data
    WHERE is_processed = FALSE
    GROUP BY district_name, source_type, source_id
    ORDER BY occurrence_count DESC, last_seen DESC
    LIMIT p_limit;
$$;

-- 거리명 검색 (유사 매칭)
CREATE OR REPLACE FUNCTION public.search_similar_temp_district_names(
    p_district_name VARCHAR(255),
    p_limit INTEGER DEFAULT 10
)
RETURNS TABLE (
    district_name    VARCHAR(255),
    district_code    VARCHAR(96),
    occurrence_count BIGINT,
    is_processed     BOOLEAN,
    similarity_score REAL
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        td.district_name,
        td.district_code,
        COUNT(*) AS occurrence_count,
        td.is_processed,
        similarity(td.district_name, p_district_name) AS similarity_score
    FROM public.temp_district_data td
    WHERE td.district_name % p_district_name
    GROUP BY td.district_name, td.district_code, td.is_processed
    ORDER BY similarity_score DESC, occurrence_count DESC
    LIMIT p_limit;
$$;

-- 거리명 일괄 매핑 (같은 이름을 한 번에)
CREATE OR REPLACE FUNCTION public.batch_map_temp_district_name_to_code(
    p_district_name VARCHAR(255),
    p_district_code VARCHAR(96),
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
DECLARE
    v_updated_count INTEGER;
BEGIN
    UPDATE public.temp_district_data
    SET district_code = p_district_code,
        admin_message = p_admin_message,
        is_processed  = TRUE,
        processed_at  = CURRENT_TIMESTAMP,
        updated_at    = CURRENT_TIMESTAMP
    WHERE district_name = p_district_name
      AND is_processed = FALSE;

    GET DIAGNOSTICS v_updated_count = ROW_COUNT;
    RETURN v_updated_count;
END;
$$;

-- 통계 조회
CREATE OR REPLACE FUNCTION public.get_temp_district_data_statistics()
RETURNS TABLE (
    total_count BIGINT,
    processed_count BIGINT,
    unprocessed_count BIGINT,
    unique_district_names BIGINT,
    mapped_district_codes BIGINT
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        COUNT(*) AS total_count,
        COUNT(*) FILTER (WHERE is_processed = TRUE)  AS processed_count,
        COUNT(*) FILTER (WHERE is_processed = FALSE) AS unprocessed_count,
        COUNT(DISTINCT district_name) AS unique_district_names,
        COUNT(DISTINCT district_code) FILTER (WHERE district_code IS NOT NULL) AS mapped_district_codes
    FROM public.temp_district_data;
$$;
