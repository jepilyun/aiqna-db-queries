/*
 * aiqna db for web service (Influencers with numeric PK)
 * Database Name 'aiqna'
 *
 * Created 2024-10-12
 * Updated 2025-10-25
 */

-- 필요 확장 (이미 설치되어 있으면 생략 가능)
-- CREATE EXTENSION IF NOT EXISTS postgis;
-- CREATE EXTENSION IF NOT EXISTS pg_trgm;


--------------------------------------------------------------------------------
-- TABLE: influencers
--------------------------------------------------------------------------------
CREATE TABLE public.influencers (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- ← 숫자 PK
  country_code    VARCHAR(2)    NULL,
  city_code       VARCHAR(96)   NULL,

  name_en         VARCHAR(100)  NOT NULL,
  name_native     VARCHAR(100)  NULL,
  name_ko         VARCHAR(100)  NULL,
  order_num       SMALLINT      NOT NULL DEFAULT 0,

  description_en      VARCHAR(1023) NULL,
  description_native  VARCHAR(1023) NULL,

  google_place_id VARCHAR(63)   NULL,
  youtube_ch_id   VARCHAR(48)   NULL,
  instagram_id    VARCHAR(48)   NULL,

  -- 위도/경도
  latitude   NUMERIC(10, 8) NULL,
  longitude  NUMERIC(11, 8) NULL,

  -- 자동 생성되는 지리 객체 컬럼
  location GEOGRAPHY(POINT, 4326)
    GENERATED ALWAYS AS (
      CASE 
        WHEN latitude IS NOT NULL AND longitude IS NOT NULL 
        THEN geography(ST_SetSRID(ST_MakePoint(longitude, latitude), 4326))
        ELSE NULL
      END
    ) STORED,

  radius_m        INTEGER       NULL,
  address_en      VARCHAR(255)  NULL,
  address_native  VARCHAR(255)  NULL,
  google_map_url  VARCHAR(255)  NULL,
  naver_map_url   VARCHAR(255)  NULL,

  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  created_by   VARCHAR(511) NULL,
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  is_active    BOOLEAN     NOT NULL DEFAULT TRUE,
  deactivated_at TIMESTAMPTZ NULL,
  deactivated_by VARCHAR(511) NULL,
  is_display   BOOLEAN     NOT NULL DEFAULT TRUE,

  thumbnail_main_1 VARCHAR(1023) NULL,
  thumbnail_main_2 VARCHAR(1023) NULL,
  thumbnail_main_3 VARCHAR(1023) NULL,
  thumbnail_main_4 VARCHAR(1023) NULL,
  thumbnail_main_5 VARCHAR(1023) NULL,

  thumbnail_1      VARCHAR(1023) NULL,
  thumbnail_2      VARCHAR(1023) NULL,
  thumbnail_3      VARCHAR(1023) NULL,
  thumbnail_4      VARCHAR(1023) NULL,
  thumbnail_5      VARCHAR(1023) NULL,

  thumbnail_vertical_1 VARCHAR(1023) NULL,
  thumbnail_vertical_2 VARCHAR(1023) NULL,
  thumbnail_vertical_3 VARCHAR(1023) NULL,
  thumbnail_vertical_4 VARCHAR(1023) NULL,
  thumbnail_vertical_5 VARCHAR(1023) NULL,

  -- FK
  CONSTRAINT influencers_country_code_fkey
    FOREIGN KEY (country_code)
    REFERENCES public.countries (country_code)
    ON UPDATE CASCADE ON DELETE CASCADE,

  CONSTRAINT influencers_city_code_fkey
    FOREIGN KEY (city_code)
    REFERENCES public.cities (city_code)
    ON UPDATE CASCADE ON DELETE CASCADE,

  -- 값 검증
  CONSTRAINT influencers_radius_m_check CHECK (radius_m IS NULL OR radius_m >= 0),
  CONSTRAINT influencers_latitude_check CHECK (latitude IS NULL OR (latitude BETWEEN -90 AND 90)),
  CONSTRAINT influencers_longitude_check CHECK (longitude IS NULL OR (longitude BETWEEN -180 AND 180)),
  CONSTRAINT influencers_order_num_check CHECK (order_num >= 0)
) TABLESPACE pg_default;

-- INDEXES
CREATE INDEX IF NOT EXISTS influencers_city_order_idx
  ON public.influencers (city_code, order_num, id);

CREATE INDEX IF NOT EXISTS influencers_country_idx
  ON public.influencers (country_code);

CREATE INDEX IF NOT EXISTS influencers_city_active_display_idx
  ON public.influencers (city_code, is_active, is_display)
  WHERE is_active = TRUE AND is_display = TRUE;

CREATE INDEX IF NOT EXISTS influencers_is_active_idx
  ON public.influencers (is_active, order_num)
  WHERE is_active = TRUE;

CREATE INDEX IF NOT EXISTS influencers_location_gist_idx
  ON public.influencers USING GIST (location)
  WHERE location IS NOT NULL;

CREATE INDEX IF NOT EXISTS influencers_lat_lng_idx
  ON public.influencers (latitude, longitude)
  WHERE latitude IS NOT NULL AND longitude IS NOT NULL;

CREATE INDEX IF NOT EXISTS influencers_name_en_trgm_idx
  ON public.influencers USING gin (name_en gin_trgm_ops);

CREATE INDEX IF NOT EXISTS influencers_name_ko_trgm_idx
  ON public.influencers USING gin (name_ko gin_trgm_ops)
  WHERE name_ko IS NOT NULL;

CREATE INDEX IF NOT EXISTS influencers_name_native_trgm_idx
  ON public.influencers USING gin (name_native gin_trgm_ops)
  WHERE name_native IS NOT NULL;

-- RLS
ALTER TABLE public.influencers ENABLE ROW LEVEL SECURITY;

CREATE POLICY "influencers are visible to everyone"
  ON public.influencers FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

CREATE POLICY "Service role can manage influencers"
  ON public.influencers FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- TRIGGER
CREATE TRIGGER trigger_update_influencers_updated_at
  BEFORE UPDATE ON public.influencers
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();



--------------------------------------------------------------------------------
-- TABLE: influencer_i18n  (PK: (influencer_id, lang_code))
--------------------------------------------------------------------------------
CREATE TABLE public.influencer_i18n (
  influencer_id    BIGINT       NOT NULL,          -- ← 참조 ID
  lang_code        VARCHAR(8)   NOT NULL,
  name_i18n        VARCHAR(255) NOT NULL,
  description_i18n VARCHAR(1023) NULL,

  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  CONSTRAINT influencer_i18n_pkey PRIMARY KEY (influencer_id, lang_code),
  CONSTRAINT influencer_i18n_influencer_id_fkey
    FOREIGN KEY (influencer_id) 
    REFERENCES public.influencers (id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT influencer_i18n_lang_code_fkey
    FOREIGN KEY (lang_code) 
    REFERENCES public.languages (lang_code)
    ON UPDATE CASCADE ON DELETE CASCADE
) TABLESPACE pg_default;

-- INDEXES
CREATE INDEX IF NOT EXISTS influencer_i18n_name_trgm_idx
  ON public.influencer_i18n USING gin (name_i18n gin_trgm_ops);

CREATE INDEX IF NOT EXISTS influencer_i18n_lang_idx
  ON public.influencer_i18n (lang_code);

-- RLS
ALTER TABLE public.influencer_i18n ENABLE ROW LEVEL SECURITY;

CREATE POLICY "influencer_i18n are visible to everyone"
  ON public.influencer_i18n FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

CREATE POLICY "Service role can manage influencer_i18n"
  ON public.influencer_i18n FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- TRIGGER
CREATE TRIGGER trigger_update_influencer_i18n_updated_at
  BEFORE UPDATE ON public.influencer_i18n
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();



--------------------------------------------------------------------------------
-- TABLE: map_influencer_search_keywords (PK: (influencer_id, search_keyword))
--------------------------------------------------------------------------------
CREATE TABLE public.map_influencer_search_keywords (
  influencer_id BIGINT        NOT NULL,
  search_keyword VARCHAR(100) NOT NULL,
  CONSTRAINT map_influencer_search_keywords_pkey 
    PRIMARY KEY (influencer_id, search_keyword),
  CONSTRAINT map_influencer_search_keywords_influencer_id_fkey 
    FOREIGN KEY (influencer_id) 
    REFERENCES public.influencers (id) 
    ON UPDATE CASCADE ON DELETE CASCADE
) TABLESPACE pg_default;

ALTER TABLE public.map_influencer_search_keywords ENABLE ROW LEVEL SECURITY;

CREATE INDEX IF NOT EXISTS idx_misq_influencer_id
  ON public.map_influencer_search_keywords (influencer_id);

CREATE POLICY "map_influencer_search_keywords are visible to everyone" 
  ON public.map_influencer_search_keywords FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

CREATE POLICY "Service role can manage map_influencer_search_keywords" 
  ON public.map_influencer_search_keywords FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);



--------------------------------------------------------------------------------
-- TABLE: map_influencer (PK: (influencer_id, source_type, source_id))
--------------------------------------------------------------------------------
CREATE TABLE public.map_influencer (
  influencer_id BIGINT       NOT NULL,             -- ← 참조 ID
  source_type   VARCHAR(50)  NOT NULL,
  source_id     VARCHAR(1023) NOT NULL,

  -- AI 추출 정보
  confidence_score   NUMERIC(3, 2) NULL,  -- 0.00 ~ 1.00
  extracted_at       TIMESTAMPTZ DEFAULT NOW(),
  extraction_method  VARCHAR(50) NULL,
  
  -- 관리 정보
  is_verified  BOOLEAN NOT NULL DEFAULT FALSE,
  verified_at  TIMESTAMPTZ NULL,
  verified_by  VARCHAR(511) NULL,
  
  is_selected  BOOLEAN NOT NULL DEFAULT FALSE,
  order_num    INTEGER NOT NULL DEFAULT 0,
  added_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at   TIMESTAMPTZ DEFAULT NOW(),

  CONSTRAINT map_influencer_pkey
    PRIMARY KEY (influencer_id, source_type, source_id),

  CONSTRAINT map_influencer_influencer_id_fkey
    FOREIGN KEY (influencer_id) 
    REFERENCES public.influencers (id)
    ON UPDATE CASCADE ON DELETE CASCADE,

  CONSTRAINT map_influencer_source_type_check 
    CHECK (source_type IN ('youtube_video', 'instagram_post', 'blog_post', 'text')),
  
  CONSTRAINT map_influencer_order_num_check CHECK (order_num >= 0),
  CONSTRAINT map_influencer_confidence_check 
    CHECK (confidence_score IS NULL OR (confidence_score BETWEEN 0 AND 1))
) TABLESPACE pg_default;

-- INDEXES
CREATE INDEX IF NOT EXISTS map_influencer_id_order_idx
  ON public.map_influencer (influencer_id, order_num, source_id);

CREATE INDEX IF NOT EXISTS map_influencer_id_added_idx
  ON public.map_influencer (influencer_id, added_at DESC, source_id);

CREATE INDEX IF NOT EXISTS map_influencer_selected_idx
  ON public.map_influencer (influencer_id, order_num, added_at DESC)
  WHERE is_selected = TRUE;

CREATE INDEX IF NOT EXISTS map_influencer_verified_idx
  ON public.map_influencer (influencer_id, confidence_score DESC)
  WHERE is_verified = TRUE;

CREATE INDEX IF NOT EXISTS map_influencer_source_idx
  ON public.map_influencer (source_type, source_id, influencer_id);

CREATE INDEX IF NOT EXISTS map_influencer_source_type_idx
  ON public.map_influencer (source_type, added_at DESC);

CREATE INDEX IF NOT EXISTS map_influencer_confidence_idx
  ON public.map_influencer (confidence_score DESC)
  WHERE confidence_score >= 0.8;

-- RLS
ALTER TABLE public.map_influencer ENABLE ROW LEVEL SECURITY;

CREATE POLICY "map_influencer are visible to everyone"
  ON public.map_influencer FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

CREATE POLICY "Service role can manage map_influencer"
  ON public.map_influencer FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- TRIGGER
CREATE TRIGGER trigger_update_map_influencer_updated_at
  BEFORE UPDATE ON public.map_influencer
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();



--------------------------------------------------------------------------------
-- FUNCTION: upsert_influencer_mapping (ID 버전)
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.upsert_influencer_mapping(
    p_influencer_id BIGINT,
    p_source_type VARCHAR(50),
    p_source_id   VARCHAR(1023),
    p_confidence_score NUMERIC(3, 2) DEFAULT NULL,
    p_extraction_method VARCHAR(50) DEFAULT NULL
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
BEGIN
    INSERT INTO public.map_influencer (
        influencer_id,
        source_type,
        source_id,
        confidence_score,
        extraction_method,
        extracted_at
    ) VALUES (
        p_influencer_id,
        p_source_type,
        p_source_id,
        p_confidence_score,
        p_extraction_method,
        NOW()
    )
    ON CONFLICT (influencer_id, source_type, source_id) DO UPDATE SET
        confidence_score = EXCLUDED.confidence_score,
        extraction_method = EXCLUDED.extraction_method,
        extracted_at = NOW(),
        updated_at = NOW();
END;
$$;



--------------------------------------------------------------------------------
-- FUNCTION: get_influencers_for_content (ID 반환)
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.get_influencers_for_content(
    p_source_type VARCHAR(50),
    p_source_id   VARCHAR(1023)
)
RETURNS TABLE (
    influencer_id BIGINT,
    name_en VARCHAR(100),
    name_ko VARCHAR(100),
    city_code VARCHAR(96),
    confidence_score NUMERIC(3, 2),
    is_verified BOOLEAN
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        i.id AS influencer_id,
        i.name_en,
        i.name_ko,
        i.city_code,
        ms.confidence_score,
        ms.is_verified
    FROM public.map_influencer ms
    JOIN public.influencers i ON ms.influencer_id = i.id
    WHERE ms.source_type = p_source_type
      AND ms.source_id = p_source_id
    ORDER BY ms.confidence_score DESC NULLS LAST, ms.order_num;
$$;



--------------------------------------------------------------------------------
-- FUNCTION: get_content_for_influencer (ID 입력)
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.get_content_for_influencer(
    p_influencer_id BIGINT,
    p_source_type VARCHAR(50) DEFAULT NULL,
    p_verified_only BOOLEAN DEFAULT FALSE
)
RETURNS TABLE (
    source_type VARCHAR(50),
    source_id VARCHAR(1023),
    confidence_score NUMERIC(3, 2),
    is_verified BOOLEAN,
    added_at TIMESTAMPTZ
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        ms.source_type,
        ms.source_id,
        ms.confidence_score,
        ms.is_verified,
        ms.added_at
    FROM public.map_influencer ms
    WHERE ms.influencer_id = p_influencer_id
      AND (p_source_type IS NULL OR ms.source_type = p_source_type)
      AND (NOT p_verified_only OR ms.is_verified = TRUE)
    ORDER BY ms.order_num, ms.added_at DESC;
$$;



--------------------------------------------------------------------------------
-- FUNCTION: get_influencers_by_city (ID 반환)
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.get_influencers_by_city(
    p_city_code VARCHAR(96),
    p_active_only BOOLEAN DEFAULT TRUE
)
RETURNS TABLE (
    influencer_id BIGINT,
    name_en VARCHAR(100),
    name_ko VARCHAR(100),
    name_native VARCHAR(100),
    latitude NUMERIC(10, 8),
    longitude NUMERIC(11, 8),
    order_num SMALLINT
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        i.id AS influencer_id,
        i.name_en,
        i.name_ko,
        i.name_native,
        i.latitude,
        i.longitude,
        i.order_num
    FROM public.influencers i
    WHERE i.city_code = p_city_code
      AND (NOT p_active_only OR (i.is_active = TRUE AND i.is_display = TRUE))
    ORDER BY i.order_num, i.id;
$$;
