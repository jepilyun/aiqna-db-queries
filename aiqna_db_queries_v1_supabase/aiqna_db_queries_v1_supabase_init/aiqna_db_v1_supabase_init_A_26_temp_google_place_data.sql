/*
 * aiqna db for web service (Temp Google Place Data Table)
 * Database Name 'aiqna'
 *
 * Created 2024-10-12
 * Updated 2025-10-12
 */

--------------------------------------------------------------------------------
-- TABLE: temp_google_place_data
--  - AI로 추출된 Google Place 임시 저장 (google_place_id 매핑 전)
--------------------------------------------------------------------------------
CREATE TABLE public.temp_google_place_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- 숫자 PK

  -- 추출된 장소 정보
  place_name VARCHAR(255) NOT NULL,
  city_name  VARCHAR(255) NULL,  -- 참고용 (어느 도시의 장소인지)
  
  -- 소스 정보
  source_type VARCHAR(50)   NOT NULL,
  source_id   VARCHAR(1023) NOT NULL,

  -- 매핑 정보
  google_place_id VARCHAR(63) NULL,
  
  -- 관리 정보
  admin_message VARCHAR(1023) NULL,
  is_processed  BOOLEAN NOT NULL DEFAULT FALSE,
  processed_at  TIMESTAMPTZ NULL,
  
  -- 시스템 정보
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ          DEFAULT CURRENT_TIMESTAMP,

  -- 외래키
  CONSTRAINT temp_google_place_data_google_place_id_fkey
    FOREIGN KEY (google_place_id)
    REFERENCES public.google_places (google_place_id)
    ON UPDATE CASCADE ON DELETE SET NULL,

  -- 제약조건
  CONSTRAINT temp_google_place_data_source_type_check 
    CHECK (source_type IN ('youtube_video', 'instagram_post', 'blog_post', 'text')),
  
  CONSTRAINT temp_google_place_data_place_name_not_empty_check 
    CHECK (LENGTH(TRIM(place_name)) > 0),
  
  -- 중복 방지: 같은 소스에서 같은 장소명은 한 번만
  CONSTRAINT temp_google_place_data_unique_source_place
    UNIQUE (source_type, source_id, place_name)
);

-- =============================================================================================
-- INDEXES
-- =============================================================================================

CREATE INDEX IF NOT EXISTS temp_google_place_data_unprocessed_idx
  ON public.temp_google_place_data (is_processed, created_at)
  WHERE is_processed = FALSE;

CREATE INDEX IF NOT EXISTS temp_google_place_data_place_name_idx
  ON public.temp_google_place_data (place_name, created_at DESC);

CREATE INDEX IF NOT EXISTS temp_google_place_data_place_name_trgm_idx
  ON public.temp_google_place_data USING gin (place_name gin_trgm_ops);

CREATE INDEX IF NOT EXISTS temp_google_place_data_city_name_idx
  ON public.temp_google_place_data (city_name, created_at DESC)
  WHERE city_name IS NOT NULL;

CREATE INDEX IF NOT EXISTS temp_google_place_data_source_idx
  ON public.temp_google_place_data (source_type, source_id, created_at DESC);

CREATE INDEX IF NOT EXISTS temp_google_place_data_google_place_id_idx
  ON public.temp_google_place_data (google_place_id, created_at DESC)
  WHERE google_place_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS temp_google_place_data_processed_idx
  ON public.temp_google_place_data (is_processed, processed_at DESC)
  WHERE is_processed = TRUE;

CREATE INDEX IF NOT EXISTS temp_google_place_data_created_at_idx
  ON public.temp_google_place_data (created_at DESC);

-- =============================================================================================
-- RLS
-- =============================================================================================

ALTER TABLE public.temp_google_place_data ENABLE ROW LEVEL SECURITY;

CREATE POLICY "temp_google_place_data are visible to everyone"
  ON public.temp_google_place_data FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

CREATE POLICY "Service role can manage temp_google_place_data"
  ON public.temp_google_place_data FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- =============================================================================================
-- TRIGGERS
-- =============================================================================================

CREATE TRIGGER trigger_update_temp_google_place_data_updated_at
  BEFORE UPDATE ON public.temp_google_place_data
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE OR REPLACE FUNCTION auto_mark_processed_on_temp_google_place_id()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    IF NEW.google_place_id IS NOT NULL AND OLD.google_place_id IS NULL THEN
        NEW.is_processed := TRUE;
        NEW.processed_at := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER trigger_auto_mark_processed_temp_google_place
  BEFORE UPDATE ON public.temp_google_place_data
  FOR EACH ROW
  WHEN (NEW.google_place_id IS NOT NULL AND OLD.google_place_id IS NULL)
  EXECUTE FUNCTION auto_mark_processed_on_temp_google_place_id();

-- =============================================================================================
-- FUNCTIONS
-- =============================================================================================

-- 장소명 저장
CREATE OR REPLACE FUNCTION public.add_temp_google_place_data(
    p_place_name  VARCHAR(255),
    p_source_type VARCHAR(50),
    p_source_id   VARCHAR(1023),
    p_city_name   VARCHAR(255) DEFAULT NULL
)
RETURNS BIGINT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_id BIGINT;
BEGIN
    INSERT INTO public.temp_google_place_data (
        place_name, source_type, source_id, city_name
    ) VALUES (
        TRIM(p_place_name), p_source_type, p_source_id, TRIM(p_city_name)
    )
    ON CONFLICT (source_type, source_id, place_name) DO NOTHING
    RETURNING id INTO v_id;
    
    RETURN v_id;
END;
$$;

-- google_place_id 매핑
CREATE OR REPLACE FUNCTION public.map_temp_google_place_data_to_google_place_id(
    p_temp_google_place_data_id BIGINT,
    p_google_place_id VARCHAR(63),
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    UPDATE public.temp_google_place_data
    SET google_place_id = p_google_place_id,
        admin_message   = p_admin_message,
        is_processed    = TRUE,
        processed_at    = CURRENT_TIMESTAMP,
        updated_at      = CURRENT_TIMESTAMP
    WHERE id = p_temp_google_place_data_id;
END;
$$;

-- 미처리 목록 조회
CREATE OR REPLACE FUNCTION public.get_unprocessed_temp_google_place_data(
    p_city_name VARCHAR(255) DEFAULT NULL,
    p_limit INTEGER DEFAULT 100
)
RETURNS TABLE (
    place_name VARCHAR(255),
    city_name  VARCHAR(255),
    source_type VARCHAR(50),
    source_id   VARCHAR(1023),
    occurrence_count BIGINT,
    first_seen TIMESTAMPTZ,
    last_seen  TIMESTAMPTZ
)
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
    SELECT 
        place_name,
        city_name,
        source_type,
        source_id,
        COUNT(*)        AS occurrence_count,
        MIN(created_at) AS first_seen,
        MAX(created_at) AS last_seen
    FROM public.temp_google_place_data
    WHERE is_processed = FALSE
      AND (p_city_name IS NULL OR city_name = p_city_name)
    GROUP BY place_name, city_name, source_type, source_id
    ORDER BY occurrence_count DESC, last_seen DESC
    LIMIT p_limit;
$$;

-- 유사 검색
CREATE OR REPLACE FUNCTION public.search_similar_temp_google_place_names(
    p_place_name VARCHAR(255),
    p_city_name  VARCHAR(255) DEFAULT NULL,
    p_limit INTEGER DEFAULT 10
)
RETURNS TABLE (
    place_name VARCHAR(255),
    city_name VARCHAR(255),
    google_place_id VARCHAR(63),
    occurrence_count BIGINT,
    is_processed BOOLEAN,
    similarity_score REAL
)
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
    SELECT 
        tgp.place_name,
        tgp.city_name,
        tgp.google_place_id,
        COUNT(*) AS occurrence_count,
        tgp.is_processed,
        similarity(tgp.place_name, p_place_name) AS similarity_score
    FROM public.temp_google_place_data tgp
    WHERE tgp.place_name % p_place_name
      AND (p_city_name IS NULL OR tgp.city_name = p_city_name)
    GROUP BY tgp.place_name, tgp.city_name, tgp.google_place_id, tgp.is_processed
    ORDER BY similarity_score DESC, occurrence_count DESC
    LIMIT p_limit;
$$;

-- 일괄 매핑
CREATE OR REPLACE FUNCTION public.batch_map_temp_google_place_name_to_id(
    p_place_name VARCHAR(255),
    p_google_place_id VARCHAR(63),
    p_city_name VARCHAR(255) DEFAULT NULL,
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_updated_count INTEGER;
BEGIN
    UPDATE public.temp_google_place_data
    SET google_place_id = p_google_place_id,
        admin_message   = p_admin_message,
        is_processed    = TRUE,
        processed_at    = CURRENT_TIMESTAMP,
        updated_at      = CURRENT_TIMESTAMP
    WHERE place_name = TRIM(p_place_name)
      AND (p_city_name IS NULL OR city_name = TRIM(p_city_name))
      AND is_processed = FALSE;
    
    GET DIAGNOSTICS v_updated_count = ROW_COUNT;
    RETURN v_updated_count;
END;
$$;

-- 통계
CREATE OR REPLACE FUNCTION public.get_temp_google_place_data_statistics()
RETURNS TABLE (
    total_count BIGINT,
    processed_count BIGINT,
    unprocessed_count BIGINT,
    unique_place_names BIGINT,
    mapped_google_place_ids BIGINT,
    unique_city_names BIGINT
)
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
    SELECT 
        COUNT(*) AS total_count,
        COUNT(*) FILTER (WHERE is_processed = TRUE)  AS processed_count,
        COUNT(*) FILTER (WHERE is_processed = FALSE) AS unprocessed_count,
        COUNT(DISTINCT place_name) AS unique_place_names,
        COUNT(DISTINCT google_place_id) FILTER (WHERE google_place_id IS NOT NULL) AS mapped_google_place_ids,
        COUNT(DISTINCT city_name) FILTER (WHERE city_name IS NOT NULL) AS unique_city_names
    FROM public.temp_google_place_data;
$$;

-- 도시별 통계
CREATE OR REPLACE FUNCTION public.get_temp_google_place_data_by_city_statistics()
RETURNS TABLE (
    city_name VARCHAR(255),
    total_places BIGINT,
    processed_places BIGINT,
    unprocessed_places BIGINT
)
LANGUAGE sql
STABLE
SECURITY DEFINER
AS $$
    SELECT 
        COALESCE(city_name, 'Unknown') AS city_name,
        COUNT(*) AS total_places,
        COUNT(*) FILTER (WHERE is_processed = TRUE)  AS processed_places,
        COUNT(*) FILTER (WHERE is_processed = FALSE) AS unprocessed_places
    FROM public.temp_google_place_data
    GROUP BY city_name
    ORDER BY total_places DESC;
$$;
