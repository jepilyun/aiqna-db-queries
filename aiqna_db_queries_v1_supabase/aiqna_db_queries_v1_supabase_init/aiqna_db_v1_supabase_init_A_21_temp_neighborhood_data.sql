/*
 * aiqna db for web service (Meta Neighborhoods Table) — numeric FK version
 * Database Name 'aiqna'
 *
 * Created 2024-10-12
 * Updated 2025-10-12
 */

-- 필요 확장 (유사도 검색 사용 시)
-- CREATE EXTENSION IF NOT EXISTS pg_trgm;

--------------------------------------------------------------------------------
-- TABLE: temp_neighborhood_data
--  - AI로 추출된 동네명 임시 저장 (neighborhood_id 매핑 전)
--------------------------------------------------------------------------------
CREATE TABLE public.temp_neighborhood_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- 숫자 PK

  -- 추출된 동네 정보
  neighborhood_name VARCHAR(100) NOT NULL,
  
  -- 소스 정보
  source_type VARCHAR(50)  NOT NULL,
  source_id   VARCHAR(1023) NOT NULL,

  -- 매핑 정보
  neighborhood_id BIGINT NULL,
  
  -- 관리 정보
  admin_message VARCHAR(1023) NULL,
  is_processed  BOOLEAN NOT NULL DEFAULT FALSE,
  processed_at  TIMESTAMPTZ NULL,
  
  -- 시스템 정보
  created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMPTZ          DEFAULT CURRENT_TIMESTAMP,

  -- 외래키 (neighborhoods.id 를 참조)
  CONSTRAINT temp_neighborhood_data_neighborhood_id_fkey
    FOREIGN KEY (neighborhood_id)
    REFERENCES public.neighborhoods (id)
    ON UPDATE CASCADE ON DELETE SET NULL,

  -- 제약조건
  CONSTRAINT temp_neighborhood_data_source_type_check 
    CHECK (source_type IN ('youtube_video', 'instagram_post', 'blog_post', 'text')),
  
  CONSTRAINT temp_neighborhood_data_neighborhood_name_not_empty_check 
    CHECK (LENGTH(TRIM(neighborhood_name)) > 0),
  
  -- 중복 방지: 같은 소스에서 같은 동네명은 한 번만
  CONSTRAINT temp_neighborhood_data_unique_source_neighborhood
    UNIQUE (source_type, source_id, neighborhood_name)
) TABLESPACE pg_default;

-- =============================================================================================
-- INDEXES
-- =============================================================================================

-- 미처리 항목 조회 (가장 중요)
CREATE INDEX IF NOT EXISTS temp_neighborhood_data_unprocessed_idx
  ON public.temp_neighborhood_data (is_processed, created_at)
  WHERE is_processed = FALSE;

-- 동네명 검색
CREATE INDEX IF NOT EXISTS temp_neighborhood_data_neighborhood_name_idx
  ON public.temp_neighborhood_data (neighborhood_name, created_at DESC);

-- 동네명 유사/부분 검색용 GIN (pg_trgm 필요)
CREATE INDEX IF NOT EXISTS temp_neighborhood_data_neighborhood_name_trgm_idx
  ON public.temp_neighborhood_data USING gin (neighborhood_name gin_trgm_ops);

-- 소스별 조회
CREATE INDEX IF NOT EXISTS temp_neighborhood_data_source_idx
  ON public.temp_neighborhood_data (source_type, source_id, created_at DESC);

-- neighborhood_id 매핑된 항목 조회
CREATE INDEX IF NOT EXISTS temp_neighborhood_data_neighborhood_id_idx
  ON public.temp_neighborhood_data (neighborhood_id, created_at DESC)
  WHERE neighborhood_id IS NOT NULL;

-- 처리된 항목 조회
CREATE INDEX IF NOT EXISTS temp_neighborhood_data_processed_idx
  ON public.temp_neighborhood_data (is_processed, processed_at DESC)
  WHERE is_processed = TRUE;

-- 최신 추가순
CREATE INDEX IF NOT EXISTS temp_neighborhood_data_created_at_idx
  ON public.temp_neighborhood_data (created_at DESC);

-- =============================================================================================
-- RLS
-- =============================================================================================

ALTER TABLE public.temp_neighborhood_data ENABLE ROW LEVEL SECURITY;

-- 읽기 전용 (모든 사용자)
CREATE POLICY "temp_neighborhood_data are visible to everyone"
  ON public.temp_neighborhood_data FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

-- 관리 작업 (service_role만)
CREATE POLICY "Service role can manage temp_neighborhood_data"
  ON public.temp_neighborhood_data FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- =============================================================================================
-- TRIGGERS
-- =============================================================================================

-- updated_at 자동 업데이트
CREATE TRIGGER trigger_update_temp_neighborhood_data_updated_at
  BEFORE UPDATE ON public.temp_neighborhood_data
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- neighborhood_id가 설정되면 자동으로 is_processed = TRUE로 변경
CREATE OR REPLACE FUNCTION auto_mark_processed_on_temp_neighborhood_id()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    IF NEW.neighborhood_id IS NOT NULL AND OLD.neighborhood_id IS NULL THEN
        NEW.is_processed := TRUE;
        NEW.processed_at := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER trigger_auto_mark_processed_temp_neighborhood
  BEFORE UPDATE ON public.temp_neighborhood_data
  FOR EACH ROW
  WHEN (NEW.neighborhood_id IS NOT NULL AND OLD.neighborhood_id IS NULL)
  EXECUTE FUNCTION auto_mark_processed_on_temp_neighborhood_id();

-- =============================================================================================
-- FUNCTIONS
-- =============================================================================================

-- 추출된 동네명 저장
CREATE OR REPLACE FUNCTION public.add_temp_neighborhood_data(
    p_neighborhood_name VARCHAR(100),
    p_source_type       VARCHAR(50),
    p_source_id         VARCHAR(1023)
)
RETURNS BIGINT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
DECLARE
    v_id BIGINT;
BEGIN
    INSERT INTO public.temp_neighborhood_data (
        neighborhood_name, source_type, source_id
    ) VALUES (
        TRIM(p_neighborhood_name), p_source_type, p_source_id
    )
    ON CONFLICT (source_type, source_id, neighborhood_name) DO NOTHING
    RETURNING id INTO v_id;

    RETURN v_id;
END;
$$;

-- neighborhood_id 매핑 및 자동 처리
CREATE OR REPLACE FUNCTION public.map_temp_neighborhood_data_to_neighborhood_id(
    p_temp_neighborhood_data_id BIGINT,
    p_neighborhood_id BIGINT,
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
BEGIN
    UPDATE public.temp_neighborhood_data
    SET neighborhood_id = p_neighborhood_id,
        admin_message   = p_admin_message,
        is_processed    = TRUE,
        processed_at    = CURRENT_TIMESTAMP,
        updated_at      = CURRENT_TIMESTAMP
    WHERE id = p_temp_neighborhood_data_id;
END;
$$;

-- 미처리 동네명 목록 조회 (관리자용)
CREATE OR REPLACE FUNCTION public.get_unprocessed_temp_neighborhood_data(
    p_limit INTEGER DEFAULT 100
)
RETURNS TABLE (
    neighborhood_name VARCHAR(100),
    source_type       VARCHAR(50),
    source_id         VARCHAR(1023),
    occurrence_count  BIGINT,
    first_seen        TIMESTAMPTZ,
    last_seen         TIMESTAMPTZ
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        neighborhood_name,
        source_type,
        source_id,
        COUNT(*)        AS occurrence_count,
        MIN(created_at) AS first_seen,
        MAX(created_at) AS last_seen
    FROM public.temp_neighborhood_data
    WHERE is_processed = FALSE
    GROUP BY neighborhood_name, source_type, source_id
    ORDER BY occurrence_count DESC, last_seen DESC
    LIMIT p_limit;
$$;

-- 동네명 검색 (유사 매칭)
CREATE OR REPLACE FUNCTION public.search_similar_temp_neighborhood_names(
    p_neighborhood_name VARCHAR(100),
    p_limit INTEGER DEFAULT 10
)
RETURNS TABLE (
    neighborhood_name VARCHAR(100),
    neighborhood_id   BIGINT,
    occurrence_count  BIGINT,
    is_processed      BOOLEAN,
    similarity_score  REAL
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        tn.neighborhood_name,
        tn.neighborhood_id,
        COUNT(*) AS occurrence_count,
        tn.is_processed,
        similarity(tn.neighborhood_name, p_neighborhood_name) AS similarity_score
    FROM public.temp_neighborhood_data tn
    WHERE tn.neighborhood_name % p_neighborhood_name
    GROUP BY tn.neighborhood_name, tn.neighborhood_id, tn.is_processed
    ORDER BY similarity_score DESC, occurrence_count DESC
    LIMIT p_limit;
$$;

-- 동네명 일괄 매핑 (같은 이름을 한 번에)
CREATE OR REPLACE FUNCTION public.batch_map_temp_neighborhood_name_to_id(
    p_neighborhood_name VARCHAR(100),
    p_neighborhood_id BIGINT,
    p_admin_message   VARCHAR(1023) DEFAULT NULL
)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
DECLARE
    v_updated_count INTEGER;
BEGIN
    UPDATE public.temp_neighborhood_data
    SET neighborhood_id = p_neighborhood_id,
        admin_message   = p_admin_message,
        is_processed    = TRUE,
        processed_at    = CURRENT_TIMESTAMP,
        updated_at      = CURRENT_TIMESTAMP
    WHERE neighborhood_name = p_neighborhood_name
      AND is_processed = FALSE;

    GET DIAGNOSTICS v_updated_count = ROW_COUNT;
    RETURN v_updated_count;
END;
$$;

-- 통계 조회
CREATE OR REPLACE FUNCTION public.get_temp_neighborhood_data_statistics()
RETURNS TABLE (
    total_count BIGINT,
    processed_count BIGINT,
    unprocessed_count BIGINT,
    unique_neighborhood_names BIGINT,
    mapped_neighborhood_ids BIGINT
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        COUNT(*) AS total_count,
        COUNT(*) FILTER (WHERE is_processed = TRUE)  AS processed_count,
        COUNT(*) FILTER (WHERE is_processed = FALSE) AS unprocessed_count,
        COUNT(DISTINCT neighborhood_name) AS unique_neighborhood_names,
        COUNT(DISTINCT neighborhood_id) FILTER (WHERE neighborhood_id IS NOT NULL) AS mapped_neighborhood_ids
    FROM public.temp_neighborhood_data;
$$;
