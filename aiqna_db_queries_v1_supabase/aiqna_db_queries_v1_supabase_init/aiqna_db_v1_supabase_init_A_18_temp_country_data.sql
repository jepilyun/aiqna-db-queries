/*
 * aiqna db for web service (Meta Cities Table)
 * Database Name 'aiqna'
 *
 * Created 2024-10-12
 * Updated 2025-10-12
 */




/*
 ***********************************************************************************************
 * TABLE: temp_country_data
 *  - AI로 추출된 도시명 임시 저장 (country_code 매핑 전)
 ***********************************************************************************************
 */
CREATE TABLE public.temp_country_data (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  -- ← 숫자 PK

  -- 추출된 국가 정보
  country_name VARCHAR(100) NOT NULL,
  
  -- 소스 정보
  source_type VARCHAR(50) NOT NULL,
  source_id VARCHAR(1023) NOT NULL,

  -- 매핑 정보
  country_code VARCHAR(2) NULL,
  
  -- 관리 정보
  admin_message VARCHAR(1023) NULL,
  is_processed BOOLEAN NOT NULL DEFAULT FALSE,
  processed_at TIMESTAMP WITH TIME ZONE NULL,
  
  -- 시스템 정보
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

  -- 외래키
  CONSTRAINT temp_country_data_country_code_fkey
    FOREIGN KEY (country_code)
    REFERENCES public.countries (country_code)
    ON UPDATE CASCADE ON DELETE SET NULL,

  -- 제약조건
  CONSTRAINT temp_country_data_source_type_check 
    CHECK (source_type IN ('youtube_video', 'instagram_post', 'blog_post', 'text')),
  
  CONSTRAINT temp_country_data_country_name_not_empty_check 
    CHECK (LENGTH(TRIM(country_name)) > 0),
  
  -- 중복 방지: 같은 소스에서 같은 국가명은 한 번만
  CONSTRAINT temp_country_data_unique_source_country
    UNIQUE (source_type, source_id, country_name)
) TABLESPACE pg_default;

-- =============================================================================================
-- INDEXES
-- =============================================================================================

-- 미처리 항목 조회 (가장 중요)
CREATE INDEX IF NOT EXISTS temp_country_data_unprocessed_idx
  ON public.temp_country_data (is_processed, created_at)
  WHERE is_processed = FALSE;

-- 국가명 검색
CREATE INDEX IF NOT EXISTS temp_country_data_country_name_idx
  ON public.temp_country_data (country_name, created_at DESC);

-- 국가명 전체 텍스트 검색
CREATE INDEX IF NOT EXISTS temp_country_data_country_name_trgm_idx
  ON public.temp_country_data USING gin (country_name gin_trgm_ops);

-- 소스별 조회
CREATE INDEX IF NOT EXISTS temp_country_data_source_idx
  ON public.temp_country_data (source_type, source_id, created_at DESC);

-- city_code 매핑된 항목 조회
CREATE INDEX IF NOT EXISTS temp_country_data_country_code_idx
  ON public.temp_country_data (country_code, created_at DESC)
  WHERE country_code IS NOT NULL;

-- 처리된 항목 조회
CREATE INDEX IF NOT EXISTS temp_country_data_processed_idx
  ON public.temp_country_data (is_processed, processed_at DESC)
  WHERE is_processed = TRUE;

-- 최신 추가순
CREATE INDEX IF NOT EXISTS temp_country_data_created_at_idx
  ON public.temp_country_data (created_at DESC);

-- =============================================================================================
-- RLS
-- =============================================================================================

ALTER TABLE public.temp_country_data ENABLE ROW LEVEL SECURITY;

-- 읽기 전용 (모든 사용자)
CREATE POLICY "temp_country_data are visible to everyone"
  ON public.temp_country_data FOR SELECT 
  TO authenticated, anon 
  USING (TRUE);

-- 관리 작업 (service_role만)
CREATE POLICY "Service role can manage temp_country_data"
  ON public.temp_country_data FOR ALL 
  TO service_role 
  USING (TRUE) 
  WITH CHECK (TRUE);

-- =============================================================================================
-- TRIGGER
-- =============================================================================================

CREATE TRIGGER trigger_update_temp_country_data_updated_at
  BEFORE UPDATE ON public.temp_country_data
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- city_code가 설정되면 자동으로 is_processed = TRUE로 변경
CREATE OR REPLACE FUNCTION auto_mark_processed_on_country_code()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    IF NEW.country_code IS NOT NULL AND OLD.country_code IS NULL THEN
        NEW.is_processed = TRUE;
        NEW.processed_at = CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER trigger_auto_mark_processed
  BEFORE UPDATE ON public.temp_country_data
  FOR EACH ROW
  WHEN (NEW.country_code IS NOT NULL AND OLD.country_code IS NULL)
  EXECUTE FUNCTION auto_mark_processed_on_country_code();




-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
-- Function: 추출된 국가명 저장
-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
CREATE OR REPLACE FUNCTION public.add_temp_country_data(
    p_country_name VARCHAR(100),
    p_source_type VARCHAR(50),
    p_source_id VARCHAR(1023)
)
RETURNS BIGINT
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
DECLARE
    v_id BIGINT;
BEGIN
    INSERT INTO public.temp_country_data (
        country_name,
        source_type,
        source_id
    ) VALUES (
        TRIM(p_country_name),
        p_source_type,
        p_source_id
    )
    ON CONFLICT (source_type, source_id, country_name) DO NOTHING
    RETURNING id INTO v_id;
    
    RETURN v_id;
END;
$$;




-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
-- Function: country_code 매핑 및 자동 처리
-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
CREATE OR REPLACE FUNCTION public.map_temp_country_data_to_country_code(
    p_temp_country_data_id BIGINT,
    p_country_code VARCHAR(2),
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
BEGIN
    UPDATE public.temp_country_data
    SET country_code = p_country_code,
        admin_message = p_admin_message,
        is_processed = TRUE,
        processed_at = CURRENT_TIMESTAMP,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = p_temp_country_data_id;
END;
$$;




-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
-- Function: 미처리 국가명 목록 조회 (관리자용)
-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
CREATE OR REPLACE FUNCTION public.get_unprocessed_temp_country_data(
    p_limit INTEGER DEFAULT 100
)
RETURNS TABLE (
    country_name VARCHAR(255),
    source_type VARCHAR(50),
    source_id VARCHAR(1023),
    occurrence_count BIGINT,
    first_seen TIMESTAMP WITH TIME ZONE,
    last_seen TIMESTAMP WITH TIME ZONE
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        country_name,
        source_type,
        source_id,
        COUNT(*) AS occurrence_count,
        MIN(created_at) AS first_seen,
        MAX(created_at) AS last_seen
    FROM public.temp_country_data
    WHERE is_processed = FALSE
    GROUP BY country_name, source_type, source_id
    ORDER BY occurrence_count DESC, last_seen DESC
    LIMIT p_limit;
$$;




-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
-- Function: 국가명 검색 (유사 매칭)
-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
CREATE OR REPLACE FUNCTION public.search_similar_country_names(
    p_country_name VARCHAR(100),
    p_limit INTEGER DEFAULT 10
)
RETURNS TABLE (
    country_name VARCHAR(100),
    country_code VARCHAR(2),
    occurrence_count BIGINT,
    is_processed BOOLEAN,
    similarity_score REAL
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        mc.country_name,
        mc.country_code,
        COUNT(*) AS occurrence_count,
        mc.is_processed,
        similarity(mc.country_name, p_country_name) AS similarity_score
    FROM public.temp_country_data mc
    WHERE mc.country_name % p_country_name
    GROUP BY mc.country_name, mc.country_code, mc.is_processed
    ORDER BY similarity_score DESC, occurrence_count DESC
    LIMIT p_limit;
$$;




-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
-- Function: 국가명 일괄 매핑 (같은 이름을 한 번에)
-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
CREATE OR REPLACE FUNCTION public.batch_map_country_name_to_code(
    p_country_name VARCHAR(100),
    p_country_code VARCHAR(2),
    p_admin_message VARCHAR(1023) DEFAULT NULL
)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
DECLARE
    v_updated_count INTEGER;
BEGIN
    UPDATE public.temp_country_data
    SET country_code = p_country_code,
        admin_message = p_admin_message,
        is_processed = TRUE,
        processed_at = CURRENT_TIMESTAMP,
        updated_at = CURRENT_TIMESTAMP
    WHERE country_name = p_country_name
      AND is_processed = FALSE;
    
    GET DIAGNOSTICS v_updated_count = ROW_COUNT;
    RETURN v_updated_count;
END;
$$;




-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
-- Function: 통계 조회
-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
CREATE OR REPLACE FUNCTION public.get_temp_country_data_statistics()
RETURNS TABLE (
    total_count BIGINT,
    processed_count BIGINT,
    unprocessed_count BIGINT,
    unique_country_names BIGINT,
    mapped_country_codes BIGINT
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = pg_catalog, public
AS $$
    SELECT 
        COUNT(*) AS total_count,
        COUNT(*) FILTER (WHERE is_processed = TRUE)  AS processed_count,
        COUNT(*) FILTER (WHERE is_processed = FALSE) AS unprocessed_count,
        COUNT(DISTINCT country_name) AS unique_country_names,
        COUNT(DISTINCT country_code) FILTER (WHERE country_code IS NOT NULL) AS mapped_country_codes
    FROM public.temp_country_data;
$$;
